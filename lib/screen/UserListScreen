
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../models/connectedUser.dart';
import '../services/chatService.dart';
import '../controllers/userController.dart';
import '../screen/chatScreen.dart';
import 'package:flutter_application_1/controllers/userController.dart';
import '../controllers/chatController.dart';

class UserListScreen extends StatefulWidget {
  @override
  _UserListScreenState createState() => _UserListScreenState();
}

class _UserListScreenState extends State<UserListScreen> {
  final ChatService _chatService = ChatService();
  final UserController _userController = Get.find<UserController>();
  final ChatController chatController = Get.put(ChatController());

  List<ConnectedUser> connectedUsers = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();

    String loggedInUsername = _userController.currentUserName.value;
   
    _chatService.connect(loggedInUsername);

    // Escuchar usuarios conectados
    _chatService.onConnectedUsers((data) {
      if (!mounted) return;
      setState(() {
        connectedUsers = data
            .map<ConnectedUser>((user) => ConnectedUser.fromJson(user))
            .toSet()
            .toList(); // Evitar duplicados
            print('Usuarios conectados recibidos: $data');

      });
    });

    setState(() {
      isLoading = false;
    });
  }

  @override
  void dispose() {
    _chatService.disconnect();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Usuarios Conectados'),
      ),
      body: isLoading
          ? Center(child: CircularProgressIndicator())
          : connectedUsers.isEmpty
              ? Center(child: Text('No hay usuarios conectados'))
              : ListView.builder(
                  itemCount: connectedUsers.length,
                  itemBuilder: (context, index) {
                    final user = connectedUsers[index];
                    return ListTile(
                      title: Text(user.username),
                      onTap: () async {
                        String senderId = _userController.currentUserName.value;
                        String receiverId = user.username;
                        //String chatId = '${senderId}_$receiverId';
                         try {
                                 // Llama a la funciÃ³n del controlador para iniciar el chat
                              await chatController.startChat(senderId, receiverId);

                                 // Luego navega al ChatScreen
                             Navigator.push(
                                context,
                              MaterialPageRoute(
        builder: (context) => ChatScreen(
          senderUsername: senderId,
          receiverUsername: receiverId,
        ),
      ),
    );
  } catch (e) {
    print('Error al iniciar el chat: $e');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('No se pudo iniciar el chat')),
    );
  }
                        
                      },
                    );
                  },
                ),
    );
  }
}