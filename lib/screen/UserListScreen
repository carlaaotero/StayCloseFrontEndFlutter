/*import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'dart:convert';
import '../models/user.dart';
import '../services/userServices.dart';
import '../services/chatService.dart';
import '../controllers/userController.dart';

class UserListScreen extends StatefulWidget {
  @override
  _UserListScreenState createState() => _UserListScreenState();
}

class _UserListScreenState extends State<UserListScreen> {
  final ChatService _chatService = ChatService();
  final UserService _userService = UserService();
  final UserController _userController = Get.find<UserController>();
  List<UserModel> connectedUsers = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();

     // Conectar al servidor de chat usando el username
    _chatService.connect(
      _userController.currentUserName.value, // Solo el username
    );


    // Escuchar usuarios conectados en tiempo real desde el servidor

  _chatService.onConnectedUsers((data) {
  setState(() {
    try {
      // Declarar la variable decodedData
      List<dynamic> decodedData;

      // Verificar si data es un String y decodificarlo
      if (data is String) {
        decodedData = jsonDecode(data) as List<dynamic>;
      } 
      // Verificar si data ya es una lista
      else if (data is List<dynamic>) {
        decodedData = data;
      } 
      // Manejar formatos inesperados
      else {
        print('Error: Tipo de datos inesperado: $data');
        return;
      }

      // Mapear la lista de usuarios
      connectedUsers = decodedData.map<UserModel>((user) {
        return UserModel.fromJson(user);
      }).toList();
    } catch (e) {
      print('Error al procesar usuarios conectados: $e');
    }
  });
});


    /*


    _chatService.onConnectedUsers((data) {
      setState(() {
        connectedUsers = data.map((user) => UserModel.fromJson(user)).toList();
      });
    });

    */

    // Cargar usuarios conectados desde el backend como respaldo
    fetchConnectedUsers();
  }

  // Desconectar socket al desmontar el widget
  @override
  void dispose() {
    _chatService.disconnect();
    super.dispose();
  }

  // Método para obtener usuarios conectados desde el backend
  Future<void> fetchConnectedUsers() async {
    try {
      print('Obteniendo usuarios conectados desde el backend...');
      List<UserModel> users = await _userService.getUsers(connectedOnly: true);
      setState(() {
        connectedUsers = users;
        isLoading = false;
      });
    } catch (e) {
      print('Error al obtener usuarios conectados: $e');
      setState(() {
        isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
         title: Obx(() => Text(_userController.currentUserName.value.isEmpty
            ? 'Cargando...'
            : 'Bienvenido, ${_userController.currentUserName.value}')),
      ),
      body: isLoading
          ? Center(child: CircularProgressIndicator())
          : connectedUsers.isEmpty
              ? Center(
                  child: Text(
                    'No hay usuarios conectados',
                    style: TextStyle(fontSize: 16),
                  ),
                )
              : ListView.builder(
                  itemCount: connectedUsers.length,
                  itemBuilder: (context, index) {
                    final user = connectedUsers[index];
                    return ListTile(
                      title: Text(user.name),
                      subtitle: Text(user.username),
                      onTap: () {
                        Navigator.pushNamed(
                          context,
                          '/chatRoom',
                          arguments: {
                            'chatId': 'chatId_${user.username}',
                            'senderUsername': _userController.currentUserName.value,
                            'receiverUsername': user.username,
                          },
                        );
                      },
                    );
                  },
                ),
    );
  }
}

*/

//
/*
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'dart:convert';
import '../models/user.dart';
import '../services/userServices.dart';
import '../services/chatService.dart';
import '../controllers/userController.dart';
import '../models/ConnectedUser.dart';

class UserListScreen extends StatefulWidget {
  @override
  _UserListScreenState createState() => _UserListScreenState();
}

class _UserListScreenState extends State<UserListScreen> {
  final ChatService _chatService = ChatService();
  final UserService _userService = UserService();
  final UserController _userController = Get.find<UserController>();
  List<ConnectedUser> connectedUsers = [];

  bool isLoading = true;

  @override
  void initState() {
    super.initState();

    // Conectar al servidor de chat usando el username
    _chatService.connect(
      _userController.currentUserName.value, // Solo el username
    );

    // Escuchar usuarios conectados en tiempo real desde el servidor
 _chatService.onConnectedUsers((data) {
  setState(() {
    try {
      // Validar si los datos son una lista
      if (data is List<dynamic>) {
        connectedUsers = data.map<ConnectedUser>((user) {
          return ConnectedUser.fromJson(user); // Crear instancia de ConnectedUser
        }).toList();
      } else {
        print('Error: Formato de datos inesperado');
      }
    } catch (e) {
      print('Error al procesar usuarios conectados: $e');
    }
  });
});




    // Cargar usuarios conectados desde el backend como respaldo
    fetchConnectedUsers();
  }

  // Desconectar socket al desmontar el widget
  @override
  void dispose() {
    _chatService.disconnect();
    super.dispose();
  }

  // Método para procesar los datos entrantes y devolver una lista
  List<dynamic> _processIncomingData(dynamic data) {
    if (data is List<dynamic>) {
      return data; // Si ya es una lista, devolverla directamente
    } else if (data is String) {
      return jsonDecode(data) as List<dynamic>; // Decodificar si es un JSON String
    } else {
      throw FormatException('Tipo de datos inesperado: $data'); // Lanzar una excepción si no es válido
    }
  }

  // Método para obtener usuarios conectados desde el backend
  Future<void> fetchConnectedUsers() async {
    try {
      print('Obteniendo usuarios conectados desde el backend...');
      List<UserModel> users = await _userService.getUsers(connectedOnly: true);
      setState(() {
        connectedUsers = users;
        isLoading = false;
      });
    } catch (e) {
      print('Error al obtener usuarios conectados: $e');
      setState(() {
        isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Obx(() => Text(_userController.currentUserName.value.isEmpty
            ? 'Cargando...'
            : 'Bienvenido, ${_userController.currentUserName.value}')),
      ),
      body: isLoading
          ? Center(child: CircularProgressIndicator())
          : connectedUsers.isEmpty
              ? Center(
                  child: Text(
                    'No hay usuarios conectados',
                    style: TextStyle(fontSize: 16),
                  ),
                )
              : ListView.builder(
                  itemCount: connectedUsers.length,
                  itemBuilder: (context, index) {
                    final user = connectedUsers[index] as ConnectedUser;
                    return ListTile(
                      title: Text(user.username),
                      
                      onTap: () {
                        Navigator.pushNamed(
                          context,
                          '/chatRoom',
                          arguments: {
                            'chatId': 'chatId_${user.username}',
                            'senderUsername': _userController.currentUserName.value,
                            'receiverUsername': user.username,
                          },
                        );
                      },
                    );
                  },
                ),
    );
  }
}

*/

/*
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'dart:convert';
import '../models/ConnectedUser.dart';
import '../services/chatService.dart';
import '../controllers/userController.dart';

class UserListScreen extends StatefulWidget {
  @override
  _UserListScreenState createState() => _UserListScreenState();
}

class _UserListScreenState extends State<UserListScreen> {
  final ChatService _chatService = ChatService();
  final UserController _userController = Get.find<UserController>();
  List<ConnectedUser> connectedUsers = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();

    // Conectar al servidor de chat usando el username
    _chatService.connect(_userController.currentUserName.value);

    // Escuchar usuarios conectados en tiempo real desde el servidor
    _chatService.onConnectedUsers((data) {
      if(!mounted) return;
      setState(() {
        try {
          // Validar si los datos son una lista
          if (data is List<dynamic>) {
            connectedUsers = data.map((user) => ConnectedUser.fromJson(user)).toList(); 
          } else {
            print('Error: Formato de datos inesperado');
          }
        } catch (e) {
          print('Error al procesar usuarios conectados: $e');
        }
      });
    });
    
/*
    setState(() {
      isLoading = false;
    });
    */
    
  }

  // Desconectar socket al desmontar el widget
  @override
  void dispose() {
    _chatService.disconnect();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Obx(() => Text(_userController.currentUserName.value.isEmpty
            ? 'Cargando...'
            : 'Bienvenido, ${_userController.currentUserName.value}')),
      ),
      body: connectedUsers.isEmpty
          ? Center(child: Text("No hay usuarios conectados"))
              : ListView.builder(
                  itemCount: connectedUsers.length,
                  itemBuilder: (context, index) {
                    final user = connectedUsers[index];
                    return ListTile(
                      title: Text(user.username), // Mostrar solo el username
                      onTap: () {
                        Navigator.pushNamed(
                          context,
                          '/chatRoom',
                          arguments: {"chatId": user.username, "senderUsername": _userController.currentUserName.value},
                          );
                          },
                        );
                      },
              );

                    );
                  }

*/
/*

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../models/ConnectedUser.dart';
import '../services/chatService.dart';
import '../controllers/userController.dart';

class UserListScreen extends StatefulWidget {
  @override
  _UserListScreenState createState() => _UserListScreenState();
}

class _UserListScreenState extends State<UserListScreen> {
  final ChatService _chatService = ChatService();
  final UserController _userController = Get.find<UserController>();
  List<ConnectedUser> connectedUsers = [];
   bool isLoading = true;

  @override
  void initState() {
    super.initState();

    _chatService.connect(_userController.currentUserName.value);

    _chatService.onConnectedUsers((data) {
      if (!mounted) return;
      setState(() {
        try {
          if (data is List<dynamic>) {
            connectedUsers = data.map((user) => ConnectedUser.fromJson(user)).toList();
          } else {
            print("Error: Formato de datos inesperado");
          }
        } catch (e) {
          print("Error al procesar usuarios conectados: $e");
        }
      });
    });
  }

  @override
  void dispose() {
    _chatService.disconnect();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Obx(() => Text(_userController.currentUserName.value.isEmpty
            ? "Cargando..."
            : "Bienvenido, ${_userController.currentUserName.value}")),
      ),
      body: connectedUsers.isEmpty
          ? Center(child: Text("No hay usuarios conectados"))
          : ListView.builder(
              itemCount: connectedUsers.length,
              itemBuilder: (context, index) {
                final user = connectedUsers[index];
                return ListTile(
                  title: Text(user.username),
                  onTap: () {
                    Navigator.pushNamed(
                      context,
                      "/chatRoom",
                      arguments: {"chatId": user.username, "senderUsername": _userController.currentUserName.value},
                    );
                  },
                );
              },
            ),
    );
  }
}

*/

//funciona 
/*
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../models/connectedUser.dart';
import '../services/chatService.dart'; 
import '../controllers/userController.dart';
import '../controllers/chatController.dart';

class UserListScreen extends StatefulWidget {
  @override
  _UserListScreenState createState() => _UserListScreenState();

}

class _UserListScreenState extends State<UserListScreen> {
  final ChatController _chatController = Get.put(ChatController());
  final ChatService _chatService = ChatService(); //
  final UserController _userController = Get.find<UserController>(); // Obtener el controlador
  List<ConnectedUser> connectedUsers = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();

     // Obtén el username del UserController
  String loggedInUsername = _userController.currentUserName.value;

    // Conectar al servidor de chat usando el username del usuario logueado
    _chatService.connect(loggedInUsername);
    

    // Escuchar usuarios conectados en tiempo real desde el servidor
    _chatService.onConnectedUsers((data) {
      if (!mounted) return;
      setState(() {
        try {
          if (data is List<dynamic>) {
            connectedUsers = data
                .map<ConnectedUser>((user) => ConnectedUser.fromJson(user))
                .toList();
          } else {
            print('Error: Formato de datos inesperado');
          }
        } catch (e) {
          print('Error al procesar usuarios conectados: $e');
        }
      });
    });

    // Cambiar el estado de carga a falso
    setState(() {
      isLoading = false;
    });
  }

  @override
  void dispose() {
    _chatService.disconnect();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Usuarios Conectados'),
      ),
      body: isLoading
          ? Center(child: CircularProgressIndicator())
          : connectedUsers.isEmpty
              ? Center(child: Text('No hay usuarios conectados'))
              : ListView.builder(
                  itemCount: connectedUsers.length,
                  itemBuilder: (context, index) {
                    final user = connectedUsers[index];
                    return ListTile(
                      title: Text(user.username),
                      onTap: () {
                        Navigator.pushNamed(
                          context,
                          '/chatRoom',
                          arguments: {'username': user.username},
                        );
                      },
                    );
                  },
                ),
    );
  }
}

*/

////funciona ////
/*
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../models/connectedUser.dart';
import '../controllers/chatController.dart';
import '../controllers/userController.dart';

class UserListScreen extends StatefulWidget {
   final String currentUser;
  @override
  _UserListScreenState createState() => _UserListScreenState();
}

class _UserListScreenState extends State<UserListScreen> {
  final ChatController _chatController = Get.put(ChatController());
  final UserController _userController = Get.find<UserController>();
  List<ConnectedUser> connectedUsers = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();

    // Obtener el username del usuario logueado
    final String loggedInUsername = _userController.currentUserName.value;

    // Conectar al servidor de chat
    _chatController.connectToServer(loggedInUsername);

    // Escuchar usuarios conectados
    _chatController.onConnectedUsers((users) {
      if (!mounted) return;
      setState(() {
        connectedUsers = users.map((u) => ConnectedUser.fromJson(u)).toList();
        isLoading = false;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Usuarios Conectados')),
      body: isLoading
          ? Center(child: CircularProgressIndicator())
          : ListView.builder(
              itemCount: connectedUsers.length,
              itemBuilder: (context, index) {
                final user = connectedUsers[index];
                return ListTile(
                  title: Text(user.username),
                  onTap: () {
                    _chatController.startChat(user.username);
                  },
                );
              },
            ),
    );
  }
}
*/

/*

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../models/connectedUser.dart';
import '../services/chatService.dart';
import '../controllers/userController.dart';
import '../screen/chatScreen.dart';

class UserListScreen extends StatefulWidget {
  @override
  _UserListScreenState createState() => _UserListScreenState();
}

class _UserListScreenState extends State<UserListScreen> {
  final ChatService _chatService = ChatService();
  final UserController _userController = Get.find<UserController>();
  List<ConnectedUser> connectedUsers = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();

    String loggedInUsername = _userController.currentUserName.value;

    // Conectar al servidor de chat
    try {
      _chatService.connect(loggedInUsername);
    } catch (e) {
      print('Error al conectar al servidor de chat: $e');
    }

    // Escuchar usuarios conectados
    _chatService.onConnectedUsers((data) {
      if (!mounted) return;
      setState(() {
        connectedUsers = data
            .map<ConnectedUser>((user) => ConnectedUser.fromJson(user))
            .toSet()
            .toList(); // Elimina duplicados
      });
    });

    setState(() {
      isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Usuarios Conectados'),
      ),
      body: isLoading
          ? Center(child: CircularProgressIndicator())
          : connectedUsers.isEmpty
              ? Center(child: Text('No hay usuarios conectados'))
              : ListView.builder(
                  itemCount: connectedUsers.length,
                  itemBuilder: (context, index) {
                    final user = connectedUsers[index];
                    return ListTile(
                      title: Text(user.username),
                      onTap: () {
                        String senderId = _userController.currentUserName.value;
                        String receiverId = user.username;
                        String chatId = '${senderId}_$receiverId';
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => ChatScreen(
                              chatId: chatId,
                              senderId: senderId,
                              receiverId: receiverId,
                            ),
                          ),
                        );
                      },
                    );
                  },
                ),
    );
  }
}

*/

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../models/connectedUser.dart';
import '../services/chatService.dart';
import '../controllers/userController.dart';
import '../screen/chatScreen.dart';

class UserListScreen extends StatefulWidget {
  @override
  _UserListScreenState createState() => _UserListScreenState();
}

class _UserListScreenState extends State<UserListScreen> {
  final ChatService _chatService = ChatService();
  final UserController _userController = Get.find<UserController>();
  List<ConnectedUser> connectedUsers = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();

    String loggedInUsername = _userController.currentUserName.value;
    _chatService.connect(loggedInUsername);

    // Escuchar usuarios conectados
    _chatService.onConnectedUsers((data) {
      if (!mounted) return;
      setState(() {
        connectedUsers = data
            .map<ConnectedUser>((user) => ConnectedUser.fromJson(user))
            .toSet()
            .toList(); // Evitar duplicados
      });
    });

    setState(() {
      isLoading = false;
    });
  }

  @override
  void dispose() {
    _chatService.disconnect();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Usuarios Conectados'),
      ),
      body: isLoading
          ? Center(child: CircularProgressIndicator())
          : connectedUsers.isEmpty
              ? Center(child: Text('No hay usuarios conectados'))
              : ListView.builder(
                  itemCount: connectedUsers.length,
                  itemBuilder: (context, index) {
                    final user = connectedUsers[index];
                    return ListTile(
                      title: Text(user.username),
                      onTap: () {
                        String senderId = _userController.currentUserName.value;
                        String receiverId = user.username;
                        String chatId = '${senderId}_$receiverId';
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => ChatScreen(
                              chatId: chatId,
                              senderId: senderId,
                              receiverId: receiverId,
                            ),
                          ),
                        );
                      },
                    );
                  },
                ),
    );
  }
}
